---
layout: post
title:  "Review throughout the course"
date:   2021-01-04 17:44:50 +0100
---


Functions projects
- Second one, felts weird building function sin a convolutd way. But understand important for beginner to practice writng functions and familiarize with different kinds of functions (statements, declarations, etc.)

Scope project
- Nice idea to improve existing code, feels like something you may encounter in the real world

Practice challenges JS Syntax I
- Felt repetitive for experienced programmer but by doing the syntax starts to sink in

Number guesser project
- sneak peek at an actual JS app
- first time with no literal instructions but fulfulling a requirement list, also working with code someone else made.
- open-ended,man solutions work. I went my own way and modified the game.js code to make an "alert" window appear if the rles of the game werenÂ¡t folllowed. Modified to restart de input.

For loop excercise: whale language
- felt weird doing nested loops to compare letters to a vowels array. Probably for Python, I would have used a "isin()" method. But I guess it is an implicit for loop so it's okay to walk through the underlying process.

Objects
- Like Python dictionaries: key-value pairing, possible to mix different data types. Interestingly we can also have methods inside an object, unlike python? Feels like writing a class, but objects are individal declarations (unlike classes that are a general definition)?
- Objects actually inherit from the Object clss in javascript. Another way to create objects is with the new statement (calling Object), which basically creates an empty object/dictionary.
- for ... in syntax is only for objects but doesn work for arrays (it does -> arrays are objects whose keys are numbers)? As with regular for loops, it requires variable declaration. This variable does not point to the actual value of the property/nested object in the object, but just to its name.
- Create different objects of the same "class" by coding a function that returns objects. How does that differ from a class constructor? We will find out I guess.
- At this point the variety of ways to define functions starts being a bit confusing. Functions inside objects (or methods) can be defined as function assignmets, as arrow functions, and with the functionName() syntax. However, they cannot be used interchangeably in all contexts: arrow functions are incompatible with the this object, as they use the global this within their scope!
- also privacy is kind of weird. It's a fair solution to go by convention, but should we trust what others (or even ourselves) do with the code?
- getters and setters have yet another syntax different from other methods. I guess it's good to distinguish, but a bit confusing to call a method without parentheses. 
